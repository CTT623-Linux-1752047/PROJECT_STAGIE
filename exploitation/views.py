from asyncio import Task
from django.http import HttpResponse, JsonResponse
from django.shortcuts import render
from components.models.group import Group
from components.models.student import Student
from components.models.tasktype import TaskType
from components.models.technique import Technique
from components.models.level import Level

# Create your views here.
def index(request):
    return render(request, 'exploitation/index.html')

def getDataResearch(request):
    try: 
        typeSearch = request.GET.get("typeSearch")
        
        data = []
        if typeSearch == "L": 
            levels = Level.nodes.all()
            for level in levels: 
                obj ={
                    "code" : level.levelCd,
                    "name" : level.levelName}
                data.append(obj)
        
        if typeSearch == "GR": 
            groups = Group.nodes.all()
            for group in groups: 
                obj ={
                    "code" : group.groupCd,
                    "name" : group.groupName}
                data.append(obj)
                
        if typeSearch == "T": 
            techniques = Technique.nodes.all()
            for technique in techniques: 
                obj ={
                    "code" : technique.techniqueCd,
                    "name" : technique.techniqueName}
                data.append(obj)
                
        if typeSearch == "ST": 
            students = Student.nodes.all()
            for student in students: 
                obj ={
                    "code" : student.studentCd,
                    "name" : student.fullNameStudent}
                data.append(obj)
        
        if typeSearch == "TT": 
            tasktypes = TaskType.nodes.all()
            for tasktype in tasktypes :
                obj = {
                    "code": tasktype.taskTypeCd,
                    "name": tasktype.taskTypeName,
                }
                data.append(obj)
    
        return JsonResponse({"data":data}, status=200) 
    except:
        response = {"error": "Error occurred"}
        
def getData(request):
    try: 
        typeSearch = request.GET.get("typeSearch")
        
        searchCondition = request.GET.get("searchCondition")
      
        data = False
        
        if typeSearch == "TT" :
            taskType = TaskType.nodes.get(taskTypeCd=searchCondition)
            data = {
                "Type" : "TT",
                "TaskTypeCd" : taskType.taskTypeCd,
                "TaskTypeName" : taskType.taskTypeName,
                "TaskTypeID" : taskType.id,
                "VariableValue" : TaskType.getVariableValueByTaskType(searchCondition),
                "Technique" : TaskType.getTechniqueByTaskType(searchCondition),
                "relationParent" : TaskType.getTaskTypeTechniqueParentByTaskType(searchCondition),
                "relationChild" : TaskType.getTaskTypeTechniqueChildByTaskType(searchCondition)
                }
        else :
            technique = Technique.nodes.get(techniqueCd=searchCondition)
            data = {
                "Type" : "T",
                "techniqueCd" : technique.techniqueCd,
                "techniqueName" : technique.techniqueName,
                "techniqueID" : technique.id,
                "TypeTache" : Technique.getTaskTypeByTech(searchCondition),
                "GlobalTech" : Technique.getSubTechByRelation(searchCondition, "C1"),
                "ExpTech" : Technique.getSubTechByRelation(searchCondition, "C3"),
                "PartielTech" : Technique.getSubTechByRelation(searchCondition, "C2")
            }  
    
        return JsonResponse({"data":data}, status=200) 
    except:
        response = {"error": "Error occurred"}